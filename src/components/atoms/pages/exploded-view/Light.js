/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, {useRef} from 'react'
import {useGLTF, useScroll} from '@react-three/drei'
import {useFrame} from "@react-three/fiber";
import * as THREE from "three";

export function Model(props) {
  const {nodes, materials} = useGLTF('/exploded-view/light.glb')
  const group = useRef(null)
  const inner = useRef(null)
  const battery = useRef(null)
  const circuitBoard = useRef(null)
  const led = useRef(null)
  const cap = useRef(null)
  const casing = useRef(null)

  const data = useScroll()
  useFrame(() => {
    const a = data.range(0, 0.2)
    const b = data.range(0.2, 0.2)
    const c = data.range(0.4, 0.2)
    const d = data.range(0.6, 0.2)
    const e = data.range(0.8, 0.2)
    if(a < 1) {
      group.current.position.y = THREE.MathUtils.lerp(5, 0, a)
      group.current.rotation.y = THREE.MathUtils.lerp(-Math.PI * 2, Math.PI / 2, a)
    } else if( b < 1) {
      inner.current.rotation.x = THREE.MathUtils.lerp(0, -Math.PI/2, b)
    } else if( c < 1) {
      casing.current.position.y = THREE.MathUtils.lerp(0, -0.04, c)
      battery.current.position.y = THREE.MathUtils.lerp(0, -0.005, c)
      circuitBoard.current.position.y = THREE.MathUtils.lerp(0, -0.001, c)
      led.current.position.y = THREE.MathUtils.lerp(0, 0.002, c)
      cap.current.position.y = THREE.MathUtils.lerp(0, 0.02, c)
    } else if( d < 1) {
      inner.current.rotation.z = THREE.MathUtils.lerp(0, Math.PI/4, d)
      inner.current.rotation.x = THREE.MathUtils.lerp(-Math.PI/2, -Math.PI/3, d)
    } else if( e < 1) {
      casing.current.position.y = THREE.MathUtils.lerp(-0.04, 0, e)
      battery.current.position.y = THREE.MathUtils.lerp(-0.005, 0, e)
      circuitBoard.current.position.y = THREE.MathUtils.lerp(-0.001, 0, e)
      led.current.position.y = THREE.MathUtils.lerp(0.002, 0, e)
      cap.current.position.y = THREE.MathUtils.lerp(0.02, 0, e)
    }
  })

  return (
    <group ref={group}>
      <group ref={inner}>
        <group {...props} dispose={null} rotation={[0, 0, Math.PI]}>
          <mesh ref={battery} geometry={nodes.battery.geometry} material={materials.Abyss} scale={0.001} />
          <mesh ref={circuitBoard} geometry={nodes['circuit-board'].geometry} material={materials['Day Glow']}
                scale={0.001} />
          <mesh ref={led} geometry={nodes.led.geometry} material={materials['Forbidden Thrill']} scale={0.001} />
          <mesh ref={cap} geometry={nodes.cap.geometry} material={materials['Magic Scent']} scale={0.001} />
          <mesh ref={casing} geometry={nodes['outer-case'].geometry} material={materials.Saturn} scale={0.001} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/exploded-view/light.glb')
